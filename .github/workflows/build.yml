name: Build

on:
  push:

jobs:
  libs:
    name: Build Libraries
    runs-on: ubuntu-22.04

    steps:
    - name: Check out repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        cache: pip
        cache-dependency-path: |
          **/pyproject.toml
          **/requirements*.txt

    - name: Prepare Python env
      run: |
        python -m pip install -U pip setuptools wheel

    - name: Install dependencies
      run: |
        pip install -r ./jinja/requirements.txt

    - name: Install Nuitka
      run: |
        pip install Nuitka==2.7.12

    - name: Build library with Nuitka
      run: |
        DIR_LIBS=$Python_ROOT_DIR/lib/python3.10/site-packages
        ls -lah $DIR_LIBS
        cd jinja
        nuitka --module wizardjinja.py
        ls -lah

    - name: Build wrapper library
      run: |
        cd jinja
        gcc -fPIC -shared -o libjinja.so wizardjinja.c -I$(python3-config --includes) -L$(python3-config --prefix)/lib -lpython3.10
        ls -lah
    
    - name: Upload libraries
      uses: actions/upload-artifact@v4
      with:
        name: libjinja
        path: |
          jinja/*.so

  haskell:
    name: Build Haskell
    runs-on: ubuntu-22.04
    needs: libs

    steps:
    - name: Checkout git repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        cache: pip
        cache-dependency-path: |
          **/pyproject.toml
          **/requirements*.txt

    - name: Install dependencies
      run: |
        pip install -r ./jinja/requirements.txt

    - name: Fetch all git history
      run: |
        git fetch --prune --unshallow

    - name: Prepare ~/.local/bin
      run: |
        mkdir -p ~/.local/bin
        export PATH=~/.local/bin:$PATH

    - name: Cache ~/.stack
      id: cache-stack
      uses: actions/cache@v3
      with:
        path: ~/.stack
        key: stack-home-ubuntu22-${{ hashFiles('**/package.yaml')}}-${{ hashFiles('**/stack.yaml*') }}
        restore-keys: |
          stack-home-ubuntu22-

    - name: Cache haskell dir
      id: cache-haskell
      uses: actions/cache@v3
      with:
        path: haskell/.stack-work
        key: haskell-dir-ubuntu22-${{ hashFiles('haskell/package.yaml')}}-${{ hashFiles('haskell/**/*.hs') }}
        restore-keys: |
          haskell-dir-ubuntu22-${{ hashFiles('haskell/package.yaml')}}-
          haskell-dir-ubuntu22-

    - name: Cache Stack in ~/.local/bin
      id: cache-stack-local-bin
      uses: actions/cache@v3
      with:
        path: ~/.local/bin
        key: stack-local-bin-ubuntu22-3.1.1

    - name: Setup stack
      if: steps.cache-stack-local-bin.outputs.cache-hit != 'true'
      run: |
        curl -L https://github.com/commercialhaskell/stack/releases/download/v$STACK_VERSION/stack-$STACK_VERSION-linux-x86_64.tar.gz | tar xz --wildcards --strip-components=1 -C ~/.local/bin '*/stack';

    - name: Download libraries
      uses: actions/download-artifact@v4
      with:
        name: libjinja

    - name: Check lib contents
      run: |
        mkdir -p ./haskell/lib
        mv ./*.so haskell/lib/
        ls -lah haskell/lib/

    - name: Install GHC and dependencies
      run: |
        cd haskell
        stack build --no-terminal --install-ghc --only-dependencies

    - name: Build application
      run: |
        cd haskell
        stack build --no-terminal --skip-ghc-check 2>&1
        cp $(stack path --local-install-root)/bin/haskell-jinja-exe ./haskell-jinja
        ls -lah

    - name: Try application
      run: |
        cd haskell
        ls -lah $(pwd)/lib
        PYTHONPATH=$(pwd)/lib LD_LIBRARY_PATH=$PWD/lib:$LD_LIBRARY_PATH ./haskell-jinja

    - name: Stack test
      run: |
        cd haskell
        PYTHONPATH=$(pwd)/lib LD_LIBRARY_PATH=$PWD/lib:$LD_LIBRARY_PATH stack test --no-terminal --skip-ghc-check

    - name: Create dist
      run: |
        mkdir -p dist
        cp haskell/haskell-jinja dist/
        cp -r haskell/lib dist/

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: |
          dist/

  docker:
    name: Build Docker image
    runs-on: ubuntu-22.04

    needs: [haskell]

    env:
      IMAGE_NAME: jinja-in-haskell
      DOCKER_META_CONTEXT: '.'
      DOCKER_META_FILE: 'Dockerfile'
      DOCKER_META_PLATFORMS: 'linux/amd64'

    steps:
    - name: Checkout git repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Download dist
      uses: actions/download-artifact@v4
      with:
        name: dist

    - name: Check local contents
      run: |
        mkdir -p dist
        mv lib dist/
        mv haskell-jinja dist/
        chmod +x dist/haskell-jinja
        ls -lah ./dist

    - name: Docker meta [test]
      id: meta-test
      uses: docker/metadata-action@v5
      with:
        images: |
          local/${{ env.IMAGE_NAME }}
        tags: |
          type=sha

    - name: Docker build [test]
      uses: docker/build-push-action@v5
      with:
        context: ${{ env.DOCKER_META_CONTEXT }}
        file: ${{ env.DOCKER_META_FILE }}
        platforms: ${{ env.DOCKER_META_PLATFORMS }}
        push: false
        tags: ${{ steps.meta-test.outputs.tags }}
        labels: ${{ steps.meta-test.outputs.labels }}

    - name: Docker login [docker.io]
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_PASSWORD }}

    - name: Docker meta [public]
      id: meta-public
      if: github.event_name != 'pull_request'
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}},enable=${{ !startsWith(github.ref, 'refs/tags/v0.') }}

    - name: Docker build+push [public]
      uses: docker/build-push-action@v5
      if: github.event_name != 'pull_request' && steps.meta-public.outputs.tags != ''
      with:
        context: ${{ env.DOCKER_META_CONTEXT }}
        file: ${{ env.DOCKER_META_FILE }}
        platforms: ${{ env.DOCKER_META_PLATFORMS }}
        push: true
        tags: ${{ steps.meta-public.outputs.tags }}
        labels: ${{ steps.meta-public.outputs.labels }}
